#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏
"""

import requests
import time
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000/api"

def wait_for_api():
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API...")
    max_retries = 30
    for i in range(max_retries):
        try:
            response = requests.get(f"{API_BASE_URL.replace('/api', '')}/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                return True
        except requests.exceptions.RequestException:
            pass
        print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{max_retries}...")
        time.sleep(2)
    
    print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    return False

def check_endpoint(endpoint, name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint"""
    try:
        response = requests.get(f"{API_BASE_URL}{endpoint}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ {name}: {len(data)} –∑–∞–ø–∏—Å–µ–π")
            return data
        else:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå {name}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - {e}")
        return None

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    dept_data = {
        "name": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
        "description": "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/departments", json=dept_data)
        if response.status_code == 200:
            dept = response.json()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {dept['name']}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∏–ø –Ω–∞—Ä—è–¥–∞
            duty_type_data = {
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞—Ä—è–¥",
                "description": "–ù–∞—Ä—è–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                "priority": 1,
                "people_per_day": 2
            }
            
            response = requests.post(f"{API_BASE_URL}/duty-types", json=duty_type_data)
            if response.status_code == 200:
                duty_type = response.json()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∏–ø –Ω–∞—Ä—è–¥–∞: {duty_type['name']}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                emp_data = {
                    "first_name": "–ò–≤–∞–Ω",
                    "last_name": "–ò–≤–∞–Ω–æ–≤",
                    "middle_name": "–ò–≤–∞–Ω–æ–≤–∏—á",
                    "position": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
                    "department_id": dept['id']
                }
                
                response = requests.post(f"{API_BASE_URL}/employees", json=emp_data)
                if response.status_code == 200:
                    emp = response.json()
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp['last_name']} {emp['first_name']}")
                    
                    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø –Ω–∞—Ä—è–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
                    assignment_data = {
                        "employee_id": emp['id'],
                        "duty_type_id": duty_type['id']
                    }
                    
                    response = requests.post(f"{API_BASE_URL}/employee-duty-types", json=assignment_data)
                    if response.status_code == 200:
                        print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω —Ç–∏–ø –Ω–∞—Ä—è–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞—Ä—è–¥–∞: {response.text}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {response.text}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –Ω–∞—Ä—è–¥–∞: {response.text}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API
    if not wait_for_api():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
    
    departments = check_endpoint("/departments", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
    duty_types = check_endpoint("/duty-types", "–¢–∏–ø—ã –Ω–∞—Ä—è–¥–æ–≤")
    employees = check_endpoint("/employees", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
    if not departments or not duty_types or not employees:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
        create_test_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
        print("\nüìä –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
        check_endpoint("/departments", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è")
        check_endpoint("/duty-types", "–¢–∏–ø—ã –Ω–∞—Ä—è–¥–æ–≤")
        check_endpoint("/employees", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    
    print("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")

if __name__ == "__main__":
    main() 