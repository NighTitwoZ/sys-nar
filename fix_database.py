#!/usr/bin/env python3
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from database import engine, Base
from models.models import EmployeeStatusSchedule, Employee

async def fix_database():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ employee_status_schedules
        async with engine.begin() as conn:
            try:
                result = await conn.execute("SELECT COUNT(*) FROM employee_status_schedules")
                count = result.scalar()
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ employee_status_schedules —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å–µ–π: {count}")
            except Exception as e:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ employee_status_schedules –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
                print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é...")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS employee_status_schedules (
                        id SERIAL PRIMARY KEY,
                        employee_id INTEGER NOT NULL REFERENCES employees(id),
                        status VARCHAR(10) NOT NULL,
                        start_date DATE NOT NULL,
                        end_date DATE NOT NULL,
                        notes TEXT,
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                        updated_at TIMESTAMP WITH TIME ZONE
                    )
                """)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                await conn.execute("""
                    CREATE INDEX IF NOT EXISTS ix_employee_status_schedules_id 
                    ON employee_status_schedules(id)
                """)
                
                await conn.execute("""
                    CREATE INDEX IF NOT EXISTS ix_employee_status_schedules_employee_id 
                    ON employee_status_schedules(employee_id)
                """)
                
                await conn.execute("""
                    CREATE INDEX IF NOT EXISTS ix_employee_status_schedules_dates 
                    ON employee_status_schedules(start_date, end_date)
                """)
                
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ employee_status_schedules —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
        async with engine.begin() as conn:
            result = await conn.execute("SELECT COUNT(*) FROM employees")
            count = result.scalar()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ employees —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å–µ–π: {count}")
            
            if count > 0:
                result = await conn.execute("SELECT id, first_name, last_name FROM employees LIMIT 3")
                employees = result.fetchall()
                print("üìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
                for emp in employees:
                    print(f"   ID: {emp[0]}, –ò–º—è: {emp[1]} {emp[2]}")
        
        print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    asyncio.run(fix_database()) 