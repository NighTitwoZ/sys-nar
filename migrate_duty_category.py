#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è duty_category –≤ —Ç–∞–±–ª–∏—Ü—É duty_types
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def migrate_duty_category():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è duty_category"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv('DATABASE_URL', 'postgresql://postgres:postgres@localhost:5432/naradi_db')
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ duty_category
        check_query = """
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'duty_types' AND column_name = 'duty_category';
        """
        
        result = await conn.fetch(check_query)
        
        if result:
            print("‚ö†Ô∏è  –ü–æ–ª–µ duty_category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ duty_types")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ duty_category
        alter_query = """
        ALTER TABLE duty_types 
        ADD COLUMN duty_category VARCHAR(50) NOT NULL DEFAULT 'internal';
        """
        
        await conn.execute(alter_query)
        print("‚úÖ –ü–æ–ª–µ duty_category –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É duty_types")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–ª—é
        comment_query = """
        COMMENT ON COLUMN duty_types.duty_category IS '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞—Ä—è–¥–∞: internal - –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, academic - –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π';
        """
        
        await conn.execute(comment_query)
        print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–æ–ª—é duty_category")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ (–≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Ä—è–¥—ã —Å—á–∏—Ç–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏)
        update_query = """
        UPDATE duty_types 
        SET duty_category = 'internal' 
        WHERE duty_category IS NULL OR duty_category = '';
        """
        
        await conn.execute(update_query)
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        check_result_query = "SELECT id, name, duty_category FROM duty_types LIMIT 5;"
        result = await conn.fetch(check_result_query)
        
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π):")
        for row in result:
            print(f"  ID: {row['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {row['name']}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row['duty_category']}")
        
        await conn.close()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è duty_category...")
    asyncio.run(migrate_duty_category()) 