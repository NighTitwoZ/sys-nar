#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000/api"

def test_distribution():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    current_date = datetime.now()
    request_data = {
        "year": current_date.year,
        "month": current_date.month
    }
    
    try:
        print(f"üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ {current_date.month}/{current_date.year}...")
        
        response = requests.post(
            f"{API_BASE_URL}/duty-distribution/generate",
            json=request_data
        )
        
        if response.status_code == 200:
            distribution = response.json()
            
            print(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏: {len(distribution)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            analyze_distribution(distribution)
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def analyze_distribution(distribution):
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Ä—è–¥–æ–≤"""
    print("\nüìã –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
    print("-" * 40)
    
    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    employee_dates = {}  # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ -> –¥–∞—Ç—ã –Ω–∞—Ä—è–¥–æ–≤
    date_employees = {}  # –î–∞—Ç–∞ -> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    duty_type_dates = {}  # –¢–∏–ø –Ω–∞—Ä—è–¥–∞ -> –¥–∞—Ç—ã -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫
    
    total_duties = 0
    
    for dept in distribution:
        print(f"\nüè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {dept['department_name']}")
        dept_duties = dept['duties']
        print(f"   –ù–∞—Ä—è–¥–æ–≤: {len(dept_duties)}")
        
        for duty in dept_duties:
            total_duties += 1
            date = duty['date']
            employee_id = duty['employee_id']
            employee_name = duty['employee_name']
            duty_type_name = duty['duty_type_name']
            people_per_day = duty['people_per_day']
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            if employee_id not in employee_dates:
                employee_dates[employee_id] = []
            employee_dates[employee_id].append(date)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –¥–∞—Ç—É
            if date not in date_employees:
                date_employees[date] = []
            date_employees[date].append(employee_id)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–∏–ø—ã –Ω–∞—Ä—è–¥–æ–≤
            if duty_type_name not in duty_type_dates:
                duty_type_dates[duty_type_name] = {}
            if date not in duty_type_dates[duty_type_name]:
                duty_type_dates[duty_type_name][date] = 0
            duty_type_dates[duty_type_name][date] += 1
    
    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –Ω–∞—Ä—è–¥–æ–≤: {total_duties}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employee_dates)}")
    print(f"   –î–Ω–µ–π —Å –Ω–∞—Ä—è–¥–∞–º–∏: {len(date_employees)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π:")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Ä—è–¥–æ–≤ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
    violations = 0
    for date, employees in date_employees.items():
        if len(employees) != len(set(employees)):
            violations += 1
            print(f"   ‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ: {date} - –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    
    if violations == 0:
        print("   ‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–ª–æ–≤–µ–∫ –≤ –Ω–∞—Ä—è–¥–µ
    duty_violations = 0
    for duty_type, dates in duty_type_dates.items():
        for date, count in dates.items():
            # –ù–∞—Ö–æ–¥–∏–º people_per_day –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞—Ä—è–¥–∞
            for dept in distribution:
                for duty in dept['duties']:
                    if duty['duty_type_name'] == duty_type and duty['date'] == date:
                        people_per_day = duty['people_per_day']
                        if count > people_per_day:
                            duty_violations += 1
                            print(f"   ‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ: {duty_type} –Ω–∞ {date} - {count} —á–µ–ª–æ–≤–µ–∫ –≤–º–µ—Å—Ç–æ {people_per_day}")
                        break
    
    if duty_violations == 0:
        print("   ‚úÖ –°–æ–±–ª—é–¥–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ–ª–æ–≤–µ–∫ –≤ –Ω–∞—Ä—è–¥–µ")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –Ω–∞—Ä—è–¥–∞–º–∏
    interval_violations = 0
    for employee_id, dates in employee_dates.items():
        dates.sort()
        for i in range(1, len(dates)):
            date1 = datetime.fromisoformat(dates[i-1])
            date2 = datetime.fromisoformat(dates[i])
            days_diff = (date2 - date1).days
            if days_diff < 3:
                interval_violations += 1
                print(f"   ‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_id} - {days_diff} –¥–Ω–µ–π –º–µ–∂–¥—É –Ω–∞—Ä—è–¥–∞–º–∏")
    
    if interval_violations == 0:
        print("   ‚úÖ –°–æ–±–ª—é–¥–µ–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –Ω–∞—Ä—è–¥–∞–º–∏ (–º–∏–Ω–∏–º—É–º 3 –¥–Ω—è)")
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_distribution() 